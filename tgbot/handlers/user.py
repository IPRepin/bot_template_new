import logging

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.callback_data_factory import stocks_callback
from tgbot.keyboards.inline import (
    stocks_markup,
    stock_online_keyboard,
    stock_tatu_keyboard,
    stock_feedback_keyboard,
    shop_keyboard,
    epil_keyboard,
)
from tgbot.keyboards.services_inline_keyboards import (
    services_callback,
    service_epil_keyboard,
    service_coccon_keyboard,
    service_bbl_keyboard,
    service_pico_keyboard,
    service_tatu_keyboard,
    service_ultera_keyboard,
    services_markup,
)
from tgbot.misc.throttling import rate_limit
from tgbot.keyboards.reply import menu_ru
from aiogram.dispatcher.filters import Command, Text
from datetime import datetime

from tgbot.models.db_comands import (
    select_stock,
    select_service,
)

new_date = datetime.now()
now_date = new_date.strftime("%d.%m.%Y")


@rate_limit(5)
async def user_start(message: Message):
    await message.answer_photo(open('/home/pavelrepin/GitHub/bot_template_new/image/bot.png', 'rb'),caption=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∫–ª–∏–Ω–∏–∫–∏ XELLA!\n\n"
        f"üü¢–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –ø—Ä–æ –∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ.\n\n"
        f"üü¢–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—ë –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.\n\n"
        f"üü¢–†–∞—Å—Å–∫–∞–∂—É –≥–¥–µ —Å–∫–∞—á–∞—Ç—å –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º,\
                        –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É –∫–ª–∏–Ω–∏–∫–∏,\
                         –Ω–æ –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤!\n\n"
        f"üü¢–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ, –≤—Ä–∞—á–∞—Ö –∏ \
                        —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º.\n\n"
        f"üü¢–ê –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —è —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ\
                         –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å –≤–∞—Å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–ª–∏–Ω–∏–∫–∏.\n"
        f"–û —á–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å...?",
        reply_markup=menu_ru,
    )


@rate_limit(5)
async def open_command(message: Message):
    await message.answer(
        "üíûXella ‚Äî —ç—Ç–æ –∫–ª–∏–Ω–∏–∫–∞, —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª—è—é—Ç –¥—Ä–µ–≤–Ω—é—é —è–ø–æ–Ω—Å–∫—É—é —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –ö–∏–Ω—Ü—É–≥–∏üéå. \
        –ú–∞—Å—Ç–µ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –ö–∏–Ω—Ü—É–≥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ª–∞–∫–∞, –≥–¥–µ —Ä–∞—Å—Ç–≤–æ—Ä—è—é—Ç –ø–æ—Ä–æ—à–æ–∫ –∑–æ–ª–æ—Ç–∞ –∏–ª–∏ –ø–ª–∞—Ç–∏–Ω—ã, \
        —é–≤–µ–ª–∏—Ä–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ä–∞–∑–±–∏—Ç—É—é –∫–µ—Ä–∞–º–∏–∫—É –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –µ–µ –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. \
        –¢–µ—Ä–ø–µ–Ω–∏–µ, –Ω–∞–≤—ã–∫, –æ–ø—ã—Ç, –∫–∞—á–µ—Å—Ç–≤–æ –∏ —É–º–µ–Ω–∏–µ –≤–∏–¥–µ—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤ –∏–∑—ä—è–Ω–∞—Ö —Å—Ç–∞–ª–∏ –æ—Å–Ω–æ–≤–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π Xella.\n"
        "\n"
        "üë©‚Äç‚öïÔ∏è–ó–¥–µ—Å—å –≤–∞—Å –≤—Å—Ç—Ä–µ—Ç—è—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –≤—ã—Å—à–∏–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ \
        –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –û—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ Xella —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã \
        —Å –Ω—ã—Ä—è–Ω–∏–µ–º –∑–∞ –∂–µ–º—á—É–≥–æ–º ‚Äî –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∫—Ä–æ–ø–æ—Ç–ª–∏–≤—ã–π –ø–æ–∏—Å–∫ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç\
         —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å. –í—Å–µ, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Xella, —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ ‚Äî –≤ –±–∞–ª–∞–Ω—Å–µ –º–µ–∂–¥—É\
          –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —ç—Å—Ç–µ—Ç–∏–∫–æ–π. –ö–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π\
           –º–µ–¥–∏—Ü–∏–Ω–µ, –∞ –≤—Å—è —Ä–∞–±–æ—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª—É—á—à–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–∞—Ö \
           –∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n"
        "\n"
        "üîÜ–ù–æ –≥–ª–∞–≤–Ω–æ–µ, Xella ‚Äî —ç—Ç–æ –∫–æ–º–º—å—é–Ω–∏—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤. –ö–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥—Ä—É–∑–µ–π –Ω–∞—à–µ–≥–æ\
         –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞\
          –ª—é–±–æ–≤—å –∫ —Å–µ–±–µ, –∞ –Ω–µ –Ω–∞ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –∫ –∏–∑—ä—è–Ω–∞–º. –í –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –±–µ—Ä–µ–∂–Ω–æ–≥–æ\
           –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Xella —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∞—Å–æ—Ç–∞ ‚Äî –≤–Ω–µ—à–Ω—è—è\
            –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è, –∏–∑ —á–µ–≥–æ –æ–Ω–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ —ç—Å—Ç–µ—Ç–∏–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç–∏–ª–µ–º –∂–∏–∑–Ω–∏ –∏\
             —Å–ø–æ—Å–æ–±–æ–º —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –∏ –Ω–∞ –º–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–∞—Å.\n"
        "üèµ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.üèµ"
    )


@rate_limit(5)
async def services(message: Message):
    await message.answer(
        "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏:",
        reply_markup=services_markup,
    )


@rate_limit(5)
async def stocks(message: Message):
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –Ω–∞ {now_date}:", reply_markup=stocks_markup)


@rate_limit(5)
async def contacts(message: Message):
    await message.answer(
        "–ê —Ç—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,\
     –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ –¥–æ –∫–ª–∏–Ω–∏–∫–∏!"
    )


"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–∫—Ü–∏–π"""


@rate_limit(5)
async def online_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(1)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=stock_online_keyboard,
    )


@rate_limit(5)
async def tatu_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(2)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=stock_tatu_keyboard,
    )


@rate_limit(5)
async def feedback_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(3)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=stock_feedback_keyboard,
    )


@rate_limit(5)
async def chanel_btn(call: CallbackQuery):
    await call.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π:")
    await call.message.edit_reply_markup(reply_markup=stocks_markup)


@rate_limit(5)
async def shop_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(4)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=shop_keyboard,
    )


@rate_limit(5)
async def epil_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(5)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=epil_keyboard,
    )


@rate_limit(5)
async def pm_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    stock_date = callback_data.get("stock_date")
    stock = await select_stock(6)
    await call.message.answer_photo(
        stock.image,
        caption=f"–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç {stock_date}!\n"
        f"{stock.name}\n"
        f"{stock.description}",
        reply_markup=stock_online_keyboard,
    )


"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥"""


@rate_limit(5)
async def delete_tatu_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(1)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_tatu_keyboard,
    )


@rate_limit(5)
async def picosure_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(2)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_pico_keyboard,
    )


@rate_limit(5)
async def ulthera_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(3)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_ultera_keyboard,
    )


@rate_limit(5)
async def bbl_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(4)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_bbl_keyboard,
    )


@rate_limit(5)
async def elit_plus_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(5)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_epil_keyboard,
    )


@rate_limit(5)
async def coccon_btn(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"callback_data = {call.data}")
    logging.info(f"callback_data dict = {callback_data}")
    service = await select_service(6)
    await call.message.answer_photo(
        service.image,
        caption=f"{service.name}\n" f"{service.description}",
        reply_markup=service_coccon_keyboard,
    )


@rate_limit(5)
async def chanel_service_btn(call: CallbackQuery):
    await call.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:")
    await call.message.edit_reply_markup(reply_markup=services_markup)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start", "help"], state="*")
    dp.register_message_handler(open_command, Text(endswith="–∫–ª–∏–Ω–∏–∫–µ"))
    dp.register_message_handler(services, Text(endswith="—É—Å–ª—É–≥–∏"))

    dp.register_message_handler(stocks, Text(endswith="–∞–∫—Ü–∏–∏"))

    dp.register_message_handler(contacts, Text(endswith="–Ω–∞–π—Ç–∏?"))

    dp.register_callback_query_handler(
        online_btn, stocks_callback.filter(stock_name="online")
    )
    dp.register_callback_query_handler(
        tatu_btn, stocks_callback.filter(stock_name="tatu")
    )
    dp.register_callback_query_handler(
        feedback_btn, stocks_callback.filter(stock_name="feedback")
    )
    dp.register_callback_query_handler(
        shop_btn, stocks_callback.filter(stock_name="shop")
    )
    dp.register_callback_query_handler(
        epil_btn, stocks_callback.filter(stock_name="epil")
    )
    dp.register_callback_query_handler(pm_btn, stocks_callback.filter(stock_name="pm"))
    dp.register_callback_query_handler(chanel_btn, text="chanel")
    dp.register_callback_query_handler(
        delete_tatu_btn, services_callback.filter(service_name="delete_tatu")
    )
    dp.register_callback_query_handler(
        picosure_btn, services_callback.filter(service_name="pico")
    )
    dp.register_callback_query_handler(
        ulthera_btn, services_callback.filter(service_name="ulthera")
    )
    dp.register_callback_query_handler(
        bbl_btn, services_callback.filter(service_name="bbl")
    )
    dp.register_callback_query_handler(
        elit_plus_btn, services_callback.filter(service_name="elit_plus")
    )
    dp.register_callback_query_handler(
        coccon_btn, services_callback.filter(service_name="coccon")
    )
    dp.register_callback_query_handler(chanel_service_btn, text="chanel_service")
